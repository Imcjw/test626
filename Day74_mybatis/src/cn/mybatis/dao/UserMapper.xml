<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 还有一个很重要的作用，使用动态代理开发DAO，1. namespace必须和Mapper接口类路径一致 -->
<mapper namespace="cn.mybatis.dao.UserMapper">

	<select id="findUserById" parameterType="Integer" resultType="user" >
		select * from user where id = #{id}
	</select>
		
	<!-- 
	根据用户名称模糊查询用户列表 List<User>
	  #{} :  占位符  select * from user where username like '明'     '明' == ？  防
	  ${} ： 字符串拼接  select * from user where username like 明                             不防
	  
	  select * from user where username like "%"'明'"%"  此种方式 占位符还能模糊查询 
	 -->
	<select id="findUserByName" parameterType="String" resultType="user">
		select * from user where username like "%"#{username}"%"
	</select>
	
	 <!-- 添加
	 order="AFTER"  mysql 自增长ID    先保存的数据 再生成的ID   
	 order="BEFORE"  oracle  自增长  UUID  先生成ID 再保存数据 
	 order="BEFORE"  mysql UUID  先生成ID 再保存数据 
	  -->
	  <!-- keyProperty：主键对应的pojo中的哪一个属性 -->
	  <insert id="addUser" parameterType="cn.mybatis.pojo.User" useGeneratedKeys="true" keyProperty="id">
		  	<!-- selectKey 标签实现主键返回 -->
			<!-- keyColumn:主键对应的表中的哪一列 -->
			<!-- keyProperty：主键对应的pojo中的哪一个属性 -->
			<!-- order：设置在执行insert语句前执行查询id的sql，还是在执行insert语句之后执行查询id的sql -->
			<!-- resultType：设置返回的id的类型 -->
	  			<!-- LAST_INSERT_ID():是mysql的函数，返回auto_increment自增列新记录id值。 -->
	  		<!-- <selectKey keyProperty="id" order="AFTER" resultType="int" >
	  			select LAST_INSERT_ID()
	  		</selectKey> -->
	  		insert into 
	  		user(username,sex,birthday,address) 
	  		values(#{username},#{sex},#{birthday},#{address})
	  </insert>
</mapper>